name: Run tests and upload coverage
description: Run tests on PR creation or when commited to the PR and upload coverage to CodeClimate
inputs:
  codeclimate_reporter_id:
    description: "CodeClimate reporter ID"
    required: true
  codeclimate_test_reporter_version:
    description: "Version of CodeClimate's test reporter to be used for uploading coverage data"
    required: false
    default: latest
  project_relative_path:
    description: "Relative path to the .sln or .csproj file, used as a parameter for 'dotnet test' command. Not needed if .sln or .csproj file is in the root folder of a repository"
    required: false
runs:
  using: "composite"
  steps:
    - name: Set ENV for codeclimate (pull_request)
      shell: bash
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
      # Needed as: When the action is triggered by a pull_request event, GitHub will squash and merge this branch with the base branch, generating a new commit, thus a new hash.
      run: |
        git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
        echo "GIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "GIT_COMMIT_SHA=$(git rev-parse origin/$GITHUB_HEAD_REF)" >> $GITHUB_ENV
    - name: Set ENV for codeclimate (push)
      shell: bash
      if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
      run: |
        echo "GIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "GIT_COMMIT_SHA=$GIT_COMMIT_SHA" >> $GITHUB_ENV
    - name: Set ENV for codeclimate (workflow dispatch)
      shell: bash
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "GIT_BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
        echo "GIT_COMMIT_SHA=$GIT_COMMIT_SHA" >> $GITHUB_ENV
    - name: Run tests and upload coverage
      shell: bash
      env:
        CC_TEST_REPORTER_ID: ${{ inputs.codeclimate_reporter_id }}
      run: |
        # Download codeclimate test reporter
        curl -L "https://codeclimate.com/downloads/test-reporter/test-reporter-${{ inputs.codeclimate_test_reporter_version }}-linux-amd64" > ./codeclimate-test-reporter
        chmod +x ./codeclimate-test-reporter

        # Install dotnet tools to merge coverage files
        dotnet tool install -g dotnet-reportgenerator-globaltool

        # Start codeclimate process
        ./codeclimate-test-reporter before-build

        # Build solution
        dotnet build
        dotnet test ${{ inputs.project_relative_path }} --collect:"XPlat Code Coverage" --settings runsettings.xml

        reportgenerator -reports:"./**/coverage.cobertura.xml" -targetdir:"./coverage" -reporttypes:"lcov" -filefilters:'-**/*.g.cs'   

        ./codeclimate-test-reporter after-build -t lcov --exit-code $?
